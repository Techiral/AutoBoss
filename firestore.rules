
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // --- Clients ---
    match /clients/{clientId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    match /clients {
      allow list: if request.auth != null;
    }

    // --- Agents ---
    match /agents/{agentId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      
      // Allow owners to update everything.
      // Allow the public API to update *only* the analytics field.
      allow update: if (request.auth != null && resource.data.userId == request.auth.uid) ||
                      (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['analytics']));
                      
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;

      // Allow reads (get, list) if the user is the owner OR the agent is public.
      // This rule allows the public showcase query to work.
      allow read: if (request.auth != null && resource.data.userId == request.auth.uid) ||
                    (resource.data.isPubliclyShared == true);
    }

    // --- Conversations (NEW) ---
    match /conversations/{conversationId} {
      // Allow creation for public chat widgets.
      allow create: if true;
      
      // Allow updates from the public chat API.
      allow update: if true;
      
      // The agent's owner can read their conversation data for analytics.
      allow read: if request.auth != null && get(/databases/$(database)/documents/agents/$(resource.data.agentId)).data.userId == request.auth.uid;
    }
    
    // Allow authenticated users to list conversations for the analytics page.
    // The document-level `read` rule above enforces security.
    match /conversations {
      allow list: if request.auth != null;
    }

    // --- OutboundQueue ---
    match /outboundQueue/{taskId} {
      allow create: if request.auth != null;
    }

    // --- RoadmapFeatures ---
    match /roadmapFeatures/{featureDocId} {
      allow read: if true;
      allow update: if request.auth != null &&
                       request.resource.data.currentVotes == resource.data.currentVotes + 1 &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['currentVotes']);
    }

    // --- UserVotes ---
    match /userVotes/{voteId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.featureId != null &&
                       voteId == request.resource.data.userId + '_' + request.resource.data.featureId;
    }
  }
}
