
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can only read and write to their own profile.
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Clients collection rules
    match /clients/{clientId} {
      // A user can create a client document for themselves.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // A user can read, update, or delete a client document if they are the owner.
      allow read, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      // Logged-in users can list their own clients.
      allow list: if request.auth != null && request.query.where.path == "userId" && request.query.where.op == "==" && request.query.where.value == request.auth.uid;
    }

    // Agents collection rules
    match /agents/{agentId} {
      // Allow create if the user is authenticated and is the owner.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Allow owner to read, update, delete.
      allow read, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      
      // *** THE CORE FIX IS HERE ***
      // Allow ANYONE (logged in or not) to read an agent document IF it is marked as publicly shared.
      // This is necessary for the public chat pages to work.
      allow get: if resource.data.isPubliclyShared == true;

      // Allow ANYONE (logged in or not) to list agents ONLY IF they are querying for public agents.
      // This makes the public showcase page functional for all visitors.
      allow list: if request.query.where.path == "isPubliclyShared" && request.query.where.op == "==" && request.query.where.value == true;
    }

    // Conversations can be read/written by the agent's owner for analytics.
    // The security for individual chat sessions is handled by API logic,
    // but these rules allow the owner to view transcripts.
    match /conversations/{conversationId} {
        allow read, write: if request.auth != null && get(/databases/$(database)/documents/agents/$(resource.data.agentId)).data.userId == request.auth.uid;
    }

    // Outbound queue is write-only for authenticated users.
    match /outboundQueue/{taskId} {
      allow create: if request.auth != null;
      // Reading/updating/deleting queue tasks should be handled by a secure backend process/admin only.
      allow read, update, delete: if false;
    }
  }
}
