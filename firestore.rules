
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // --- Clients ---
    match /clients/{clientId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Owners can read (get, list their own), update, delete their own clients.
      allow read, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    // Authenticated users can list clients.
    // Their app-side queries MUST filter by `where("userId", "==", request.auth.uid)`.
    // The document-level `read` rule above will then grant access to the individual documents.
    match /clients {
      allow list: if request.auth != null;
    }

    // --- Agents ---
    match /agents/{agentId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;

      // Allow fetching an agent if it's the owner OR if it's publicly shared.
      // This rule applies to `get` operations on a single document.
      allow get: if (request.auth != null && resource.data.userId == request.auth.uid) ||
                     (resource.data.isPubliclyShared == true);

      // Allow owners to list their own agents (e.g. when querying a subcollection or if path includes agentId).
      // This is less relevant for top-level collection listing, which is handled by `match /agents` below.
      allow list: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // For listing agents from the top-level '/agents' collection:
    match /agents {
      // Allow any list operation to proceed.
      // Security is enforced by:
      // 1. The application code *MUST* filter queries appropriately:
      //    - For authenticated users (AppContext): `where("userId", "==", request.auth.uid)`
      //    - For public showcase: `where("isPubliclyShared", "==", true)`
      // 2. The document-level `get` rule on `/agents/{agentId}` defined above.
      //    This rule will be checked for each document the `list` operation attempts to return.
      //    If a document doesn't meet the `get` criteria (not owned and not public), it won't be included.
      allow list: if true;
    }

    // --- OutboundQueue ---
    match /outboundQueue/{taskId} {
      allow create: if request.auth != null;
      // Consider adding rules for read/update/delete by backend workers or admins if needed.
    }

    // --- RoadmapFeatures ---
    match /roadmapFeatures/{featureDocId} {
      allow read: if true;
      allow update: if request.auth != null &&
                       request.resource.data.currentVotes == resource.data.currentVotes + 1 &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['currentVotes']);
    }

    // --- UserVotes ---
    match /userVotes/{voteId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.featureId != null &&
                       voteId == request.resource.data.userId + '_' + request.resource.data.featureId;
    }
  }
}
