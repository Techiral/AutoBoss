
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // --- Clients ---
    match /clients/{clientId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    match /clients {
      allow list: if request.auth != null; // Owners list their own clients (app query must filter by userId)
    }

    // --- Agents ---
    match /agents/{agentId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;

      // ANYONE can GET an agent document if they have its ID.
      // This is necessary for direct chat links and the iframe embed to work
      // when shared by an agent owner with their client, regardless of showcase status.
      // The agentId itself acts as a capability token.
      allow get: if true;

      // Owners can always perform full read (get + list for their own agents)
      // This 'read' also covers the 'get' for an owner.
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // For the public showcase page to list agents:
    // The query MUST include `where("isPubliclyShared", "==", true)`.
    // The `allow get: if true` rule above will then allow these specific documents
    // (that are public and returned by the filtered list) to be read.
    // For authenticated users listing their own agents, their query must filter by userId.
    // The document-level `read` for owners covers their listing needs.
    match /agents {
      allow list: if true;
    }

    // --- OutboundQueue ---
    match /outboundQueue/{taskId} {
      allow create: if request.auth != null;
    }

    // --- RoadmapFeatures ---
    match /roadmapFeatures/{featureDocId} {
      allow read: if true;
      allow update: if request.auth != null &&
                       request.resource.data.currentVotes == resource.data.currentVotes + 1 &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['currentVotes']);
    }

    // --- UserVotes ---
    match /userVotes/{voteId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.featureId != null &&
                       voteId == request.resource.data.userId + '_' + request.resource.data.featureId;
    }
  }
}
