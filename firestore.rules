
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection:
    // Users can read and write their own user profile document.
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Clients collection:
    // Authenticated users can create clients for themselves.
    // Users can read, update, or delete clients they own.
    match /clients/{clientId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    // Authenticated users can list clients.
    // Their queries must filter by userId on the client/server side.
    // The 'read' rule on /clients/{clientId} ensures they only see their own.
    match /clients {
      allow list: if request.auth != null;
    }

    // Agents collection:
    // Authenticated users can create agents for themselves.
    // Users can update or delete agents they own.
    match /agents/{agentId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      // An agent document can be fetched (get) if:
      // 1. The requester is the authenticated owner.
      // OR
      // 2. The agent document's 'isPubliclyShared' field is true.
      allow get: if (request.auth != null && resource.data.userId == request.auth.uid) ||
                    (resource.data.isPubliclyShared == true);
    }
    // Listing agents:
    // - Authenticated users can list agents (their queries must filter by userId).
    // - Unauthenticated users can list agents (the showcase page query must filter for isPubliclyShared == true).
    // The per-document 'get' rule for /agents/{agentId} ensures data integrity.
    match /agents {
      allow list: if true; // Note: Queries must be specific.
                           // For authenticated users, client/server must filter by userId.
                           // For public showcase, server must filter by isPubliclyShared == true.
    }

    // OutboundQueue collection:
    // Authenticated users can create new tasks in the queue.
    match /outboundQueue/{taskId} {
      allow create: if request.auth != null;
      // allow read, update, delete: if <your_condition_for_admin_or_backend_worker>; // Example
    }

    // Roadmap Features: Anyone can read.
    // Authenticated users can update votes by exactly +1, only affecting the currentVotes field.
    match /roadmapFeatures/{featureDocId} {
      allow read: if true;
      allow update: if request.auth != null &&
                       request.resource.data.currentVotes == resource.data.currentVotes + 1 &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['currentVotes']);
    }

    // User Votes:
    // - Documents are named like "{userId}_{featureId}".
    // - Users can read their own vote documents (by checking resource.data.userId).
    // - Users can create a vote document if:
    //   - They are authenticated.
    //   - The 'userId' field in the document data matches their auth UID.
    //   - The 'featureId' field exists in the document data.
    //   - The document's ID ({voteId}) matches the pattern "request.resource.data.userId + '_' + request.resource.data.featureId".
    match /userVotes/{voteId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.featureId != null &&
                       voteId == request.resource.data.userId + '_' + request.resource.data.featureId;
      // No updates or deletes for votes to keep it simple and prevent tampering.
    }
  }
}

    