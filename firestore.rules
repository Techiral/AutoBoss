
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can only read and write to their own profile.
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // A user can create, read, update, or delete a client document if they are the owner.
    match /clients/{clientId} {
      allow read, write, create, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Agent Rules
    match /agents/{agentId} {
      // Allow full access to the owner of the agent.
      allow read, write, create, delete: if request.auth != null && resource.data.userId == request.auth.uid;

      // Allow ANYONE to read an agent document IF it is publicly shared.
      // This is necessary for the public showcase and for the public chat pages to fetch agent details.
      // We use 'get' for direct document reads and 'list' for queries.
      allow get, list: if resource.data.isPubliclyShared == true;
    }

    // Conversations can be created by anyone (via the API route).
    // They can only be read or updated by the owner of the agent the conversation belongs to.
    match /conversations/{conversationId} {
      allow create: if true; // Anyone can start a conversation
      allow read, update: if request.auth != null && get(/databases/$(database)/documents/agents/$(resource.data.agentId)).data.userId == request.auth.uid;
      // Nobody can delete conversation history from the client side.
      allow delete: if false;
    }

    // Outbound queue is write-only for authenticated users.
    // This allows API routes or functions to queue tasks.
    match /outboundQueue/{taskId} {
      allow create: if request.auth != null;
      // Reading/updating/deleting should be handled by a secure backend process/admin only.
      allow read, update, delete: if false;
    }
  }
}
