
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection:
    // Users can read and write their own user profile document.
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Clients collection:
    match /clients/{clientId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Allow 'get' (read single document) only if user is owner
      allow get: if request.auth != null && resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    match /clients {
      // Allow authenticated users to list clients.
      // The 'get' rule on /clients/{clientId} will ensure they can only read their own client data from the list.
      // AppContext query MUST filter by userId on the client-side.
      allow list: if request.auth != null;
    }

    // Agents collection:
    match /agents/{agentId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      // Allow 'get' (read single document) if user is owner OR if agent is publicly shared.
      // This is critical for both owner access and public chat pages/showcase items.
      allow get: if (request.auth != null && resource.data.userId == request.auth.uid) || 
                     (resource.data.isPubliclyShared == true);
    }
    match /agents {
      // Allow anyone to list agents. This is broad, but necessary for queries.
      // Security is enforced by:
      // 1. Application code:
      //    - Authenticated users (AppContext) MUST filter queries by "userId".
      //    - Public showcase page MUST filter queries by "isPubliclyShared == true".
      // 2. Document-level 'get' rule: The /agents/{agentId} 'get' rule above will
      //    ultimately determine if an agent document returned by a list query can actually be read.
      allow list: if true; 
    }

    // OutboundQueue collection:
    // Authenticated users can create new tasks in the queue.
    match /outboundQueue/{taskId} {
      allow create: if request.auth != null;
      // Add admin/backend worker rules for read/update/delete if needed later
    }

    // Roadmap Features: Anyone can read.
    // Authenticated users can update votes by exactly +1.
    match /roadmapFeatures/{featureDocId} {
      allow read: if true;
      allow update: if request.auth != null &&
                       request.resource.data.currentVotes == resource.data.currentVotes + 1 &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['currentVotes']);
    }

    // User Votes:
    // Users can read their own votes and create new ones under specific conditions.
    match /userVotes/{voteId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.featureId != null &&
                       voteId == request.resource.data.userId + '_' + request.resource.data.featureId;
    }
  }
}
