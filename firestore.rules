
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // --- Clients ---
    match /clients/{clientId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Owners can read, update, delete their own clients. 'read' includes 'get'.
      allow read, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    // Authenticated users can list clients.
    // Their app-side queries MUST filter by `where("userId", "==", request.auth.uid)`.
    // The document-level `read` rule above will then grant access to the individual documents.
    match /clients {
      allow list: if request.auth != null;
    }

    // --- Agents ---
    match /agents/{agentId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      // Owners can get/read their own agents.
      // Publicly shared agents can also be fetched by anyone (for chat page OG tags, showcase details).
      allow get: if (request.auth != null && resource.data.userId == request.auth.uid) ||
                     (resource.data.isPubliclyShared == true);
    }
    // Authenticated users can list agents.
    // Their app-side queries MUST filter by `where("userId", "==", request.auth.uid)`.
    // The document-level `get` rule above will then grant access to those agents.
    //
    // For the public showcase page (Server Component fetching data):
    // This rule also allows listing if the query is for public agents.
    // The query in showcase page MUST filter `where("isPubliclyShared", "==", true)`.
    // The document-level `get` rule will then grant access to those specific public agents.
    match /agents {
      allow list: if true; // Relies on the per-document 'get' rule and correct client-side/server-side query filtering.
    }

    // --- OutboundQueue ---
    match /outboundQueue/{taskId} {
      allow create: if request.auth != null;
    }

    // --- RoadmapFeatures ---
    match /roadmapFeatures/{featureDocId} {
      allow read: if true;
      allow update: if request.auth != null &&
                       request.resource.data.currentVotes == resource.data.currentVotes + 1 &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['currentVotes']);
    }

    // --- UserVotes ---
    match /userVotes/{voteId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.featureId != null &&
                       voteId == request.resource.data.userId + '_' + request.resource.data.featureId;
    }
  }
}
