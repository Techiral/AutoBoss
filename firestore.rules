rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can only read and write their own profile document.
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // A user can manage clients that belong to them.
    match /clients/{clientId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Rules for agents are more complex, handling both private and public access.
    match /agents/{agentId} {
      // Create, update, delete is restricted to the agent's owner.
      allow create, update, delete: if request.auth != null && request.resource.data.userId == request.auth.uid;

      // An owner can always read their own agent.
      allow get: if request.auth != null && resource.data.userId == request.auth.uid;
      // Additionally, ANYONE can read a single agent document if it is public.
      // This is crucial for the public /chat/[agentId] page to function.
      allow get: if resource.data.isPubliclyShared == true;

      // Logged-in users can list their own agents.
      // Anyone (including logged-out users) can list agents if they are querying
      // for the public showcase. The application code MUST enforce the where clause.
      allow list: if true;
    }

    // A user can read/write to a conversation if they own the agent associated with it.
    // This allows owners to view analytics and transcripts.
    match /conversations/{conversationId} {
        allow read, write: if request.auth != null && get(/databases/$(database)/documents/agents/$(resource.data.agentId)).data.userId == request.auth.uid;
    }

    // The outbound queue for tasks like sending emails/SMS is write-only for authenticated users.
    // The tasks themselves are processed by a secure backend function, not read by clients.
    match /outboundQueue/{taskId} {
      allow create: if request.auth != null;
      allow read, update, delete: if false; // Prevent clients from accessing the queue
    }
  }
}
