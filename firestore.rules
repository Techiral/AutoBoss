
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // --- Clients ---
    match /clients/{clientId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    // Users can list their own clients.
    // The `read` rule on individual docs secures this query.
    match /clients/{clientId} {
      allow list: if request.auth != null;
    }

    // --- Agents ---
    match /agents/{agentId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      
      // Allow owners to update everything.
      // Allow the public API to update *only* the analytics field.
      allow update: if (request.auth != null && resource.data.userId == request.auth.uid) ||
                      (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['analytics']));
                      
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;

      // An agent can be read (get or list) if it's public, or if the user is the owner.
      // This single rule services the public showcase, the owner's dashboard,
      // and internal `get()` calls from other rules.
      allow read: if (resource.data.isPubliclyShared == true) || 
                   (request.auth != null && resource.data.userId == request.auth.uid);
    }

    // --- Conversations ---
    match /conversations/{conversationId} {
      // Allow the public chat widget to create and update conversations.
      // This is necessary for the stateful chat to work. Conversation IDs are unguessable.
      allow write: if true;
      
      // Allow the public chat widget to read conversation history to provide context.
      // Also allows the agent owner to read for analytics.
      // This is a security tradeoff for functionality, as conversation IDs are unguessable.
      allow read: if true;
    }
    
    // Allow authenticated users to list conversations for the analytics page.
    // The query is secured in the app code to only fetch conversations for agents they own.
    match /conversations {
      allow list: if request.auth != null;
    }

    // --- OutboundQueue ---
    match /outboundQueue/{taskId} {
      allow create: if request.auth != null;
    }

    // --- RoadmapFeatures ---
    match /roadmapFeatures/{featureDocId} {
      allow read: if true;
      allow update: if request.auth != null &&
                       request.resource.data.currentVotes == resource.data.currentVotes + 1 &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['currentVotes']);
    }

    // --- UserVotes ---
    match /userVotes/{voteId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.featureId != null &&
                       voteId == request.resource.data.userId + '_' + request.resource.data.featureId;
    }
  }
}
