
import { z } from 'zod';

// Zod Schemas for Flow Definition
export const FlowNodeSchema = z.object({
  id: z.string(),
  type: z.enum(['start', 'sendMessage', 'getUserInput', 'callLLM', 'condition', 'apiCall', 'end']),
  position: z.object({ x: z.number(), y: z.number() }).optional(),
  // sendMessage
  message: z.string().optional(),
  // getUserInput
  prompt: z.string().optional(), // Prompt for getUserInput
  variableName: z.string().optional(), // Variable to store user input
  // callLLM
  llmPrompt: z.string().optional(), // Prompt for callLLM
  outputVariable: z.string().optional(), // Variable to store LLM output
  // condition
  conditionExpression: z.string().optional(), // e.g., "context.variableName == 'value'"
  // apiCall
  apiUrl: z.string().optional(),
  apiMethod: z.enum(['GET', 'POST']).optional(), // etc.
  apiPayloadVariable: z.string().optional(), // variable from context to use as payload
  apiOutputVariable: z.string().optional(), // variable to store api response
});
export type FlowNode = z.infer<typeof FlowNodeSchema>;

export const FlowEdgeSchema = z.object({
  id: z.string(),
  source: z.string(), // source node id
  target: z.string(), // target node id
  label: z.string().optional(),
  condition: z.string().optional(), // For conditional transitions from a 'condition' node, e.g., "true" or "false" or specific value
});
export type FlowEdge = z.infer<typeof FlowEdgeSchema>;

export const AgentFlowDefinitionSchema = z.object({
  flowId: z.string(),
  name: z.string(),
  description: z.string(),
  nodes: z.array(FlowNodeSchema),
  edges: z.array(FlowEdgeSchema),
});
export type AgentFlowDefinition = z.infer<typeof AgentFlowDefinitionSchema>;

// Zod Schema for Flow Context
export const FlowContextSchema = z.record(z.any()).describe("Holds variables like userName, llmResponse etc. Also includes conversationHistory.");
export type FlowContext = z.infer<typeof FlowContextSchema>;


// Existing Agent and other types
export interface Agent {
  id: string;
  name: string;
  description: string; // User-provided description
  role?: string; // User-provided role for creation
  personality?: string; // User-provided personality for creation
  generatedName?: string; // Name generated by AI
  generatedPersona?: string; // Persona generated by AI
  generatedGreeting?: string; // Greeting generated by AI
  createdAt: string;
  knowledgeItems?: KnowledgeItem[];
  flow?: AgentFlowDefinition; // Each agent can have one flow
}

export interface KnowledgeItem {
  id: string;
  fileName: string;
  uploadedAt: string;
  summary?: string;
  keywords?: string[];
}

export interface ChatMessage {
  id: string;
  sender: 'user' | 'agent';
  text: string;
  timestamp: number;
  intent?: string;
  entities?: Record<string, string>;
  reasoning?: string; // From autonomous reasoning
  flowNodeId?: string; // ID of the flow node that generated this message
  flowContext?: FlowContext; // Context at the time of this message (for debugging or state)
}
