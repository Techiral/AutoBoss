
export interface FlowNode {
  id: string;
  type: 'start' | 'sendMessage' | 'getUserInput' | 'callLLM' | 'condition' | 'apiCall' | 'end';
  position?: { x: number; y: number };
  // sendMessage
  message?: string;
  // getUserInput
  prompt?: string; // Prompt for getUserInput
  variableName?: string; // Variable to store user input
  // callLLM
  llmPrompt?: string; // Prompt for callLLM (renamed from 'prompt' to avoid clash)
  outputVariable?: string; // Variable to store LLM output
  // condition
  conditionExpression?: string; // e.g., "context.variableName == 'value'"
  // apiCall
  apiUrl?: string;
  apiMethod?: 'GET' | 'POST'; // etc.
  apiPayloadVariable?: string; // variable from context to use as payload
  apiOutputVariable?: string; // variable to store api response
}

export interface FlowEdge {
  id: string;
  source: string; // source node id
  target: string; // target node id
  label?: string;
  condition?: string; // For conditional transitions from a 'condition' node, e.g., "true" or "false" or specific value
}

export interface AgentFlowDefinition {
  flowId: string;
  name: string;
  description: string;
  nodes: FlowNode[];
  edges: FlowEdge[];
}

export interface Agent {
  id: string;
  name: string;
  description: string; // User-provided description
  role?: string; // User-provided role for creation
  personality?: string; // User-provided personality for creation
  generatedName?: string; // Name generated by AI
  generatedPersona?: string; // Persona generated by AI
  generatedGreeting?: string; // Greeting generated by AI
  createdAt: string;
  knowledgeItems?: KnowledgeItem[];
  flow?: AgentFlowDefinition; // Each agent can have one flow
}

export interface KnowledgeItem {
  id: string;
  fileName: string;
  uploadedAt: string;
  summary?: string;
  keywords?: string[];
}

// Conversation context for flow execution
export interface FlowContext {
  [key: string]: any; // Holds variables like userName, llmResponse etc.
  conversationHistory?: ChatMessage[]; // Optional: for more complex context
}

export interface ChatMessage {
  id: string;
  sender: 'user' | 'agent';
  text: string;
  timestamp: number;
  intent?: string;
  entities?: Record<string, string>;
  reasoning?: string; // From autonomous reasoning
  flowNodeId?: string; // ID of the flow node that generated this message
  flowContext?: FlowContext; // Context at the time of this message (for debugging or state)
}
