// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A autonomous reasoning AI agent.
 *
 * - autonomousReasoning - A function that handles the autonomous reasoning process.
 * - AutonomousReasoningInput - The input type for the autonomousReasoning function.
 * - AutonomousReasoningOutput - The return type for the autonomousReasoning function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AutonomousReasoningInputSchema = z.object({
  context: z.string().describe('The current context of the conversation.'),
  userInput: z.string().describe('The user input to analyze.'),
});
export type AutonomousReasoningInput = z.infer<typeof AutonomousReasoningInputSchema>;

const AutonomousReasoningOutputSchema = z.object({
  nextAction: z.string().describe('The next action to take based on the context and user input.'),
  reasoning: z.string().describe('The reasoning behind the chosen action.'),
});
export type AutonomousReasoningOutput = z.infer<typeof AutonomousReasoningOutputSchema>;

export async function autonomousReasoning(input: AutonomousReasoningInput): Promise<AutonomousReasoningOutput> {
  return autonomousReasoningFlow(input);
}

const prompt = ai.definePrompt({
  name: 'autonomousReasoningPrompt',
  input: {schema: AutonomousReasoningInputSchema},
  output: {schema: AutonomousReasoningOutputSchema},
  prompt: `You are an autonomous reasoning AI agent. Your role is to analyze the context of a conversation and the user input to determine the next best action to take.

Context: {{{context}}}
User Input: {{{userInput}}}

Based on the context and user input, determine the next action to take. Provide a brief explanation of your reasoning.

Output in JSON format:
{
  "nextAction": "The next action to take",
  "reasoning": "The reasoning behind the chosen action"
}
`,
});

const autonomousReasoningFlow = ai.defineFlow(
  {
    name: 'autonomousReasoningFlow',
    inputSchema: AutonomousReasoningInputSchema,
    outputSchema: AutonomousReasoningOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
