
"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from "@/components/ui/card";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { ArrowUp, BookOpen, Users2, Palette, DollarSign, BarChart3, RefreshCw, MessageSquarePlus, GitFork, Gauge, Sparkles, Lightbulb, ExternalLink, UserPlus, LogIn } from "lucide-react";
import { useAuth } from "@/contexts/AuthContext";
import Link from "next/link";
import { cn } from "@/lib/utils";
import { useAppContext } from "../layout";
import { Badge } from "@/components/ui/badge";

interface RoadmapFeature {
  id: string;
  icon: React.ElementType;
  title: string;
  description: string;
  status: "Planned" | "In Progress" | "Researching" | "Future (Post Early Access)";
  initialVotes: number;
  category: "Client Acquisition" | "Client Management" | "Agent Capabilities" | "Platform Growth" | "Advanced Features";
}

const initialFeatures: RoadmapFeature[] = [
  {
    id: "sales-playbook",
    icon: BookOpen,
    title: "Sales Playbook & Client Acquisition Kit",
    description: "Step-by-step guides, proposal templates, and checklists to help you confidently find and sign your first AI agency clients.",
    status: "Planned",
    initialVotes: 28,
    category: "Client Acquisition",
  },
  {
    id: "client-crm",
    icon: Users2,
    title: "Simple Client Lead Management",
    description: "A lightweight tool integrated with agents to help your clients track and manage leads or inquiries generated by their AI.",
    status: "Researching",
    initialVotes: 15,
    category: "Client Management",
  },
   {
    id: "agent-analytics",
    icon: BarChart3,
    title: "Basic Agent Analytics for Clients",
    description: "Provide your clients with simple dashboards showing agent usage (e.g., number of conversations, common questions).",
    status: "Planned",
    initialVotes: 22,
    category: "Client Management",
  },
  {
    id: "knowledge-sync",
    icon: RefreshCw,
    title: "Automated Knowledge Sync (Basic)",
    description: "Allow agents to periodically re-fetch content from a specified client website URL to keep knowledge up-to-date.",
    status: "Researching",
    initialVotes: 18,
    category: "Agent Capabilities",
  },
  {
    id: "ai-content-assist",
    icon: Sparkles,
    title: "AI-Assisted Content Generation",
    description: "Tools to help quickly draft agent responses, example FAQs, or knowledge base summaries for your clients.",
    status: "Planned",
    initialVotes: 35,
    category: "Agent Capabilities",
  },
  {
    id: "whitelabel",
    icon: Palette,
    title: "Whitelabel Platform (Future Pro Tier)",
    description: "Offer AutoBoss agents and parts of the platform under your agency's branding. (Planned for a future paid offering).",
    status: "Future (Post Early Access)",
    initialVotes: 42,
    category: "Platform Growth",
  },
  {
    id: "affiliate-program",
    icon: DollarSign,
    title: "AutoBoss Affiliate Program",
    description: "Partner with us. Earn by recommending AutoBoss once we introduce subscription plans after the early adopter phase.",
    status: "Future (Post Early Access)",
    initialVotes: 30,
    category: "Platform Growth",
  },
];

export default function RoadmapPage() {
  const { currentUser } = useAuth();
  const { theme } = useAppContext(); // Get theme from context
  const [featureVotes, setFeatureVotes] = useState<Record<string, number>>({});
  const [votedFeatures, setVotedFeatures] = useState<Record<string, boolean>>({});
  const [showAuthPrompt, setShowAuthPrompt] = useState(false);

  useEffect(() => {
    const initial = initialFeatures.reduce((acc, feature) => {
      acc[feature.id] = feature.initialVotes;
      return acc;
    }, {} as Record<string, number>);
    setFeatureVotes(initial);
  }, []);

  const handleVote = (featureId: string) => {
    if (!currentUser) {
      setShowAuthPrompt(true);
      return;
    }
    setFeatureVotes((prevVotes) => ({
      ...prevVotes,
      [featureId]: (prevVotes[featureId] || 0) + 1,
    }));
    setVotedFeatures((prevVoted) => ({
      ...prevVoted,
      [featureId]: true,
    }));
  };
  
  const handleSuggestFeature = () => {
     if (!currentUser) {
      setShowAuthPrompt(true);
      return;
    }
    // In a real app, this would open a modal or redirect to a suggestion form
    alert("Thanks for your interest! Feature suggestion submission is coming soon for logged-in users.");
  };


  return (
    <div className="container mx-auto py-6 sm:py-8 px-4 md:px-6 max-w-screen-xl">
      <Card className="mb-6 sm:mb-8 bg-card/70 dark:bg-card/60 backdrop-blur-sm">
        <CardHeader className="p-4 sm:p-6">
          <CardTitle className={cn("font-headline text-xl sm:text-2xl flex items-center gap-2", "text-gradient-dynamic")}>
            <Lightbulb className="w-6 h-6 sm:w-7 sm:w-7 text-primary" />
            AutoBoss Roadmap: Help Shape Our Future
          </CardTitle>
          <CardDescription className="text-sm">
            We're building AutoBoss with our community. Your input on these potential features helps us prioritize what to build next.
            Vote on what's most valuable to you, or suggest new ideas!
          </CardDescription>
        </CardHeader>
      </Card>

      {showAuthPrompt && (
        <Alert className="mb-4 sm:mb-6 border-primary/50 bg-primary/5">
          <UserPlus className="h-4 w-4 text-primary" />
          <AlertTitle className="text-primary">Want to vote or suggest an idea?</AlertTitle>
          <AlertDescription className="text-sm">
            Please <Link href="/login" className="font-semibold underline hover:text-accent">Log In</Link> or <Link href="/signup" className="font-semibold underline hover:text-accent">Sign Up</Link> to participate.
            It helps us connect with you for feedback!
            <Button variant="ghost" size="sm" onClick={() => setShowAuthPrompt(false)} className="ml-2 text-xs h-auto p-1 text-primary">Dismiss</Button>
          </AlertDescription>
        </Alert>
      )}

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6">
        {initialFeatures.sort((a,b) => (featureVotes[b.id] || 0) - (featureVotes[a.id] || 0)).map((feature) => (
          <Card key={feature.id} className="flex flex-col hover:shadow-lg transition-shadow duration-200">
            <CardHeader className="p-4 sm:p-5">
              <div className="flex items-start justify-between">
                  <div className="flex items-center gap-2 sm:gap-3 mb-1">
                    <feature.icon className="w-5 h-5 sm:w-6 sm:w-6 text-primary shrink-0" />
                    <CardTitle className="font-headline text-base sm:text-lg">{feature.title}</CardTitle>
                  </div>
                 <Badge variant={feature.status === "Planned" ? "default" : feature.status === "In Progress" ? "secondary" : "outline"} className={cn("text-[10px] h-fit px-1.5 py-0.5", {"bg-green-500/20 text-green-700 border-green-500/40 dark:text-green-400": feature.status === "In Progress", "bg-blue-500/20 text-blue-700 border-blue-500/40 dark:text-blue-400": feature.status === "Planned"})}>{feature.status}</Badge>
              </div>
               <CardDescription className="text-xs text-muted-foreground pt-1">{feature.description}</CardDescription>
            </CardHeader>
            <CardContent className="flex-grow p-4 sm:p-5 pt-0">
              <p className="text-[11px] text-muted-foreground/80 font-medium">Category: {feature.category}</p>
            </CardContent>
            <CardFooter className="p-4 sm:p-5 pt-2 border-t flex items-center justify-between">
              <div className="flex items-center text-sm">
                <ArrowUp className="w-4 h-4 mr-1 text-primary" />
                <span className="font-semibold text-primary">{featureVotes[feature.id] || 0}</span>
                <span className="ml-1 text-xs text-muted-foreground">votes</span>
              </div>
              <Button
                variant="outline"
                size="sm"
                onClick={() => handleVote(feature.id)}
                disabled={votedFeatures[feature.id] || (!currentUser && showAuthPrompt)}
                className={cn("text-xs h-8", votedFeatures[feature.id] && "bg-accent text-accent-foreground border-accent cursor-not-allowed")}
              >
                {votedFeatures[feature.id] ? "Voted" : "Upvote"}
              </Button>
            </CardFooter>
          </Card>
        ))}
      </div>
      
      <div className="mt-8 sm:mt-12 text-center">
        <Card className="inline-block p-4 sm:p-6 bg-card/80 dark:bg-card/70 backdrop-blur-sm">
            <CardTitle className="text-lg sm:text-xl mb-2 font-headline">Have a Brilliant Idea?</CardTitle>
            <CardDescription className="text-sm mb-3 text-muted-foreground max-w-md mx-auto">
                If there's something else you'd love to see in AutoBoss that would make your AI agency journey even better, let us know!
            </CardDescription>
            <Button onClick={handleSuggestFeature} className={cn("btn-gradient-primary")}>
                <Lightbulb className="mr-2 h-4 w-4"/>
                Suggest a New Feature
            </Button>
        </Card>
      </div>
    </div>
  );
}
