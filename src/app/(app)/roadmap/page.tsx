
"use client";

import { useState, useEffect, useCallback, useMemo } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { ArrowUp, BookOpen, Users2, Palette, DollarSign, BarChart3, RefreshCw, MessageSquarePlus, GitFork, Gauge, Sparkles, Lightbulb, UserPlus, LogIn, Loader2, ChevronUp, Info } from "lucide-react";
import { useAuth } from "@/contexts/AuthContext";
import Link from "next/link";
import { cn } from "@/lib/utils";
import { useAppContext } from "../layout";
import { Badge } from "@/components/ui/badge";
import { db } from '@/lib/firebase';
import { collection, getDocs, doc, updateDoc, increment, writeBatch, serverTimestamp, query, where, getDoc } from 'firebase/firestore';
import { useToast } from "@/hooks/use-toast";

// Define a type for the Lucide icon names we'll use
type LucideIconName = keyof typeof LucideIconsMap;

interface RoadmapFeature {
  id: string; // Firestore document ID
  featureId: string; // A unique, stable string ID for the feature
  iconName: LucideIconName; 
  title: string;
  description: string;
  status: "Planned" | "In Progress" | "Researching" | "Future (Post Early Access)" | "Suggested";
  currentVotes: number;
  category: "Client Acquisition" | "Client Management" | "Agent Capabilities" | "Platform Growth" | "Advanced Features";
}

// Helper map to get Lucide components by name
const LucideIconsMap = {
  BookOpen, Users2, Palette, DollarSign, BarChart3, RefreshCw, MessageSquarePlus, GitFork, Gauge, Sparkles, Lightbulb, Info
};


// Initial features to seed if Firestore is empty (admin task, not done by this code)
const initialFeaturesSeedForAdmin: Omit<RoadmapFeature, 'id' | 'currentVotes'>[] = [
  { featureId: "sales_playbook", iconName: "BookOpen", title: "Sales Playbook & Client Acquisition Kit", description: "Step-by-step guides, proposal templates, and checklists to help you confidently find and sign your first AI agency clients.", status: "Planned", category: "Client Acquisition" },
  { featureId: "client_crm_basic", iconName: "Users2", title: "Simple Client Lead Management", description: "A lightweight tool integrated with agents to help your clients track and manage leads or inquiries generated by their AI.", status: "Researching", category: "Client Management" },
  { featureId: "agent_analytics_basic", iconName: "BarChart3", title: "Basic Agent Analytics for Clients", description: "Provide your clients with simple dashboards showing agent usage (e.g., number of conversations, common questions).", status: "Planned", category: "Client Management" },
  { featureId: "knowledge_sync_auto", iconName: "RefreshCw", title: "Automated Knowledge Sync (Basic)", description: "Allow agents to periodically re-fetch content from a specified client website URL to keep knowledge up-to-date.", status: "Researching", category: "Agent Capabilities" },
  { featureId: "ai_content_assist", iconName: "Sparkles", title: "AI-Assisted Content Generation", description: "Tools to help quickly draft agent responses, example FAQs, or knowledge base summaries for your clients.", status: "Planned", category: "Agent Capabilities" },
  { featureId: "whitelabel_platform", iconName: "Palette", title: "Whitelabel Platform (Future Pro Tier)", description: "Offer AutoBoss agents and parts of the platform under your agency's branding. (Planned for a future paid offering).", status: "Future (Post Early Access)", category: "Platform Growth" },
  { featureId: "affiliate_program", iconName: "DollarSign", title: "AutoBoss Affiliate Program", description: "Partner with us. Earn by recommending AutoBoss once we introduce subscription plans after the early adopter phase.", status: "Future (Post Early Access)", category: "Platform Growth" },
];

export default function RoadmapPage() {
  const { currentUser } = useAuth();
  const { theme } = useAppContext();
  const [features, setFeatures] = useState<RoadmapFeature[]>([]);
  const [isLoadingFeatures, setIsLoadingFeatures] = useState(true);
  const [votedFeatures, setVotedFeatures] = useState<Record<string, boolean>>({}); // Key: featureId (string), Value: true if voted
  const [isVoting, setIsVoting] = useState<Record<string, boolean>>({}); // Key: featureDocId, Value: true if voting in progress
  const [showAuthPrompt, setShowAuthPrompt] = useState(false);
  const { toast } = useToast();

  const fetchFeaturesAndUserVotes = useCallback(async () => {
    setIsLoadingFeatures(true);
    try {
      // Fetch all roadmap features
      const featuresCollection = collection(db, "roadmapFeatures");
      const featuresSnapshot = await getDocs(featuresCollection);
      const fetchedFeatures = featuresSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as RoadmapFeature));
      
      setFeatures(
        fetchedFeatures.sort((a, b) => {
          if (b.currentVotes !== a.currentVotes) return b.currentVotes - a.currentVotes;
          return a.title.localeCompare(b.title);
        })
      );

      // Fetch user's existing votes if logged in
      if (currentUser) {
        const userVotesQuery = query(collection(db, "userVotes"), where("userId", "==", currentUser.uid));
        const userVotesSnapshot = await getDocs(userVotesQuery);
        const userVotesData: Record<string, boolean> = {};
        userVotesSnapshot.forEach(doc => {
          userVotesData[doc.data().featureId as string] = true;
        });
        setVotedFeatures(userVotesData);
        // Sync with localStorage for faster UI updates on subsequent visits
        localStorage.setItem(`votedFeatures_${currentUser.uid}`, JSON.stringify(userVotesData));
      } else {
        setVotedFeatures({}); // Clear if no user
      }

    } catch (error) {
      console.error("Error fetching roadmap data:", error);
      toast({ title: "Error", description: "Could not load roadmap features.", variant: "destructive" });
    } finally {
      setIsLoadingFeatures(false);
    }
  }, [currentUser, toast]);

  useEffect(() => {
    fetchFeaturesAndUserVotes();
  }, [fetchFeaturesAndUserVotes]);
  
  // Load voted features from localStorage for initial UI state (faster than waiting for Firestore)
  useEffect(() => {
    if (currentUser) {
      const storedVotes = localStorage.getItem(`votedFeatures_${currentUser.uid}`);
      if (storedVotes) {
        // Only set if not already populated by Firestore fetch to avoid race conditions
        if (Object.keys(votedFeatures).length === 0) {
           setVotedFeatures(JSON.parse(storedVotes));
        }
      }
    }
  }, [currentUser, votedFeatures]);


  const handleVote = async (featureDocId: string, featureId: string) => {
    if (!currentUser) {
      setShowAuthPrompt(true);
      return;
    }
    if (votedFeatures[featureId]) {
      toast({ title: "Already Voted", description: "You've already upvoted this feature.", variant: "default" });
      return;
    }

    setIsVoting(prev => ({ ...prev, [featureDocId]: true }));

    // Optimistic UI Update
    const originalFeatures = [...features];
    const originalVotedFeatures = {...votedFeatures};

    setFeatures(prevFeatures => 
        prevFeatures.map(f => f.id === featureDocId ? {...f, currentVotes: f.currentVotes + 1} : f)
        .sort((a, b) => b.currentVotes - a.currentVotes)
    );
    setVotedFeatures(prev => ({ ...prev, [featureId]: true }));
    localStorage.setItem(`votedFeatures_${currentUser.uid}`, JSON.stringify({...votedFeatures, [featureId]: true }));


    try {
      const featureRef = doc(db, "roadmapFeatures", featureDocId);
      const userVoteRef = doc(db, "userVotes", `${currentUser.uid}_${featureId}`);
      
      const batch = writeBatch(db);
      batch.update(featureRef, { currentVotes: increment(1) });
      batch.set(userVoteRef, { 
        userId: currentUser.uid, 
        featureId: featureId, 
        votedAt: serverTimestamp() 
      });
      await batch.commit();
      
      toast({ title: "Vote Cast!", description: "Thanks for your feedback!" });
    } catch (error) {
      console.error("Error casting vote:", error);
      toast({ title: "Voting Error", description: "Could not save your vote. Please try again.", variant: "destructive" });
      // Revert optimistic update on error
      setFeatures(originalFeatures);
      setVotedFeatures(originalVotedFeatures);
      localStorage.setItem(`votedFeatures_${currentUser.uid}`, JSON.stringify(originalVotedFeatures));
    } finally {
      setIsVoting(prev => ({ ...prev, [featureDocId]: false }));
    }
  };
  
  const handleSuggestFeature = () => {
     if (!currentUser) {
      setShowAuthPrompt(true);
      return;
    }
    // Placeholder for actual feature suggestion submission
    // For now, you could link to a mailto: or a simple form if you had one.
    toast({title: "Coming Soon!", description: "Feature suggestion submission is planned. We're excited to hear your ideas!", duration: 5000});
  };
  
  const sortedFeatures = useMemo(() => {
    return [...features].sort((a, b) => {
        if (b.currentVotes !== a.currentVotes) {
          return b.currentVotes - a.currentVotes;
        }
        return a.title.localeCompare(b.title);
      });
  }, [features]);


  return (
    <div className="container mx-auto py-6 sm:py-8 px-2 sm:px-4 md:px-6 max-w-screen-lg">
      <Card className="mb-6 sm:mb-8 bg-card/70 dark:bg-card/60 backdrop-blur-sm">
        <CardHeader className="p-4 sm:p-6">
          <CardTitle className={cn("font-headline text-xl sm:text-2xl flex items-center gap-2", "text-gradient-dynamic")}>
            <Lightbulb className="w-6 h-6 sm:w-7 sm:w-7 text-primary" />
            AutoBoss Roadmap: Help Shape Our Future
          </CardTitle>
          <CardDescription className="text-sm">
            We're building AutoBoss with our community. Your input on these potential features helps us prioritize what to build next.
            Upvote your favorites! Have an idea? Let us know.
          </CardDescription>
        </CardHeader>
      </Card>

      {showAuthPrompt && (
        <Alert className="mb-4 sm:mb-6 border-primary/50 bg-primary/5">
          <UserPlus className="h-4 w-4 text-primary" />
          <AlertTitle className="text-primary">Want to participate?</AlertTitle>
          <AlertDescription className="text-sm">
            Please <Link href="/login" className="font-semibold underline hover:text-accent">Log In</Link> or <Link href="/signup" className="font-semibold underline hover:text-accent">Sign Up</Link> to upvote features or suggest new ideas.
            <Button variant="ghost" size="sm" onClick={() => setShowAuthPrompt(false)} className="ml-2 text-xs h-auto p-1 text-primary">Dismiss</Button>
          </AlertDescription>
        </Alert>
      )}
      
      {isLoadingFeatures ? (
        <div className="flex justify-center items-center py-10">
          <Loader2 className="h-10 w-10 animate-spin text-primary"/>
        </div>
      ) : sortedFeatures.length === 0 && !isLoadingFeatures ? (
         <Alert>
            <Lightbulb className="h-4 w-4" />
            <AlertTitle>Roadmap is Evolving!</AlertTitle>
            <AlertDescription>
              We're currently gathering initial feedback. Features will appear here soon. Check back or suggest an idea!
              <br/><span className="text-xs text-muted-foreground">(Admin: Ensure 'roadmapFeatures' collection in Firestore is populated with initial feature data including `featureId`, `iconName`, `title`, `description`, `status`, `currentVotes`, and `category`.)</span>
            </AlertDescription>
          </Alert>
      ) : (
        <div className="bg-card border rounded-lg shadow-sm">
          <ul className="divide-y divide-border/50">
            {sortedFeatures.map((feature) => {
              const IconComponent = LucideIconsMap[feature.iconName] || Lightbulb;
              const hasVoted = !!votedFeatures[feature.featureId];
              const votingInProgress = !!isVoting[feature.id];
              return (
                <li key={feature.id} className="roadmap-list-item group">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handleVote(feature.id, feature.featureId)}
                    disabled={hasVoted || votingInProgress || (!currentUser && showAuthPrompt)}
                    className={cn(
                        "roadmap-vote-button group", // Add group class here for button itself
                        hasVoted && "voted"
                    )}
                    aria-label={`Upvote ${feature.title}`}
                  >
                    {votingInProgress ? <Loader2 className="h-4 w-4 animate-spin" /> : <ChevronUp />}
                    <span>{feature.currentVotes || 0}</span>
                  </Button>
                  <div className="roadmap-feature-content">
                    <h3 className="roadmap-feature-title">
                      <IconComponent />
                      {feature.title}
                    </h3>
                    <p className="roadmap-feature-description">{feature.description}</p>
                    <div className="roadmap-feature-tags">
                      <Badge variant="outline" className="text-[10px] h-fit px-1.5 py-0.5">{feature.category}</Badge>
                      <Badge 
                        variant={feature.status === "Planned" ? "default" : feature.status === "In Progress" ? "secondary" : "outline"} 
                        className={cn("text-[10px] h-fit px-1.5 py-0.5", 
                          {"bg-green-500/20 text-green-700 border-green-500/40 dark:text-green-400": feature.status === "In Progress"},
                          {"bg-blue-500/20 text-blue-700 border-blue-500/40 dark:text-blue-400": feature.status === "Planned"},
                          {"bg-purple-500/10 text-purple-700 border-purple-500/30 dark:text-purple-400": feature.status === "Suggested"}
                        )}
                      >
                        {feature.status}
                      </Badge>
                    </div>
                  </div>
                </li>
              );
            })}
          </ul>
        </div>
      )}
      
      <div className="mt-8 sm:mt-12 text-center">
        <Card className="inline-block p-4 sm:p-6 bg-card/80 dark:bg-card/70 backdrop-blur-sm">
            <CardTitle className="text-lg sm:text-xl mb-2 font-headline">Have a Brilliant Idea?</CardTitle>
            <CardDescription className="text-sm mb-3 text-muted-foreground max-w-md mx-auto">
                If there's something else you'd love to see in AutoBoss that would make your AI agency journey even better, let us know!
            </CardDescription>
            <Button onClick={handleSuggestFeature} className={cn("btn-gradient-primary")}>
                <Lightbulb className="mr-2 h-4 w-4"/>
                Suggest a New Feature
            </Button>
        </Card>
      </div>
       <Alert variant="default" className="mt-8 text-xs text-muted-foreground bg-muted/50">
        <Info className="h-4 w-4" />
        <AlertTitle>For Admins/Developers</AlertTitle>
        <AlertDescription>
          To populate the roadmap, ensure you have a 'roadmapFeatures' collection in Firestore. Each document should include: `featureId` (string, e.g., "sales_playbook"), `iconName` (string, key from `LucideIconsMap`), `title`, `description`, `status` ("Planned", etc.), `currentVotes` (number), and `category`. A `userVotes` collection (docs like `userId_featureId`) is used to track individual votes. Ensure Firestore security rules allow reads on `roadmapFeatures` and authenticated writes/reads for `userVotes`.
        </AlertDescription>
      </Alert>
    </div>
  );
}

